name: check-test-build

on:
  push:
  workflow_call:

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get tag version
        id: get_version
        if: startsWith(github.ref, 'refs/tags')
        run: |
          echo 'version=${{ github.ref_name }}' >> $GITHUB_OUTPUT
      - name: Get commit version
        run: |
          env
          echo "version=${GITHUB_SHA:0:6}" >> $GITHUB_OUTPUT
          echo "version_test=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "$GITHUB_OUTPUT"

  build:
    needs:
      - get_version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.9"]
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          sudo apt-get install -y upx patchelf
      - name: Install dependencies (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Install UPX (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        uses: crazy-max/ghaction-upx@v2
        with:
          install-only: true
      - name: Lint with ruff
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          # stop the build if there are Python syntax errors or undefined names
          ruff --format=github --select=E9,F63,F7,F82 --target-version=py39 .
          # default set of ruff rules with GitHub Annotations
          ruff --format=github --target-version=py39 .

      - name: Pack (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo '${{ needs.get_version.outputs.version }}' >> version.txt
          pyinstaller --add-data './version.txt:.' --collect-all steamCloudSaveDownloader --onefile ./scsd --name scsd_linux64

      - name: Pack (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          Write-Output ${{ needs.get_version.outputs.version }} > version.txt
          pyinstaller --add-data './version.txt:.' --collect-all steamCloudSaveDownloader --onefile ./scsd --name scsd_windows_amd64

      - name: Build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          python -m build

      - name: Upload whl
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist/*.tar.gz
            dist/*.whl

      - name: Upload Linux Executable
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: linux_executable
          path: |
            dist/scsd_linux64

      - name: Upload Windows Executable
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: windows_executable
          path: |
            dist/scsd_windows_amd64.exe

      - name: Docker Build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: docker/build-push-action@v4
        with:
          context: .
